/*
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.Command
import org.xtext.example.mydsl.myDsl.Path
import org.xtext.example.mydsl.myDsl.Print
import org.xtext.example.mydsl.myDsl.Load
import org.xtext.example.mydsl.myDsl.Create
import org.xtext.example.mydsl.myDsl.Head

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		
		fsa.generateFile('file.py',
'''
#generated_python_file
import pandas as pd
		
«FOR c : resource.allContents.toIterable.filter(Command)»
	«c.compile»
«ENDFOR»
			
''' 
   		)
   	}
   	
   	
    
    private def compile(Command c) {
    	switch c {
    		case c.eClass().name === "Create" : compile(c as Create)
    		case c.eClass().name === "Load" : compile(c as Load)
 			case c.eClass().name === "Print" : compile(c as Print)
 			case c.eClass().name === "Head" : compile(c as Head)
 			
 			default : "Error"
		}
    }
    
    private def compile(Print p) {
    	'''print("«p.name»")'''
    }
    
    private def compile(Load l) {
		'''«l.name» = pd.read_csv('«l.path.name»')'''
    }
    
      private def compile(Create c) {
		'''
		pd.DataFrame([['Sacramento', 'California'], ['Miami', 'Florida']], columns=['City', 'State'])
		«c.path.name».to_csv('«c.path.name»', index=False)
		'''
		
    }
    
      private def compile(Head l) {
		'''print(«l.name».head())'''
    }
    

    


   	
}
