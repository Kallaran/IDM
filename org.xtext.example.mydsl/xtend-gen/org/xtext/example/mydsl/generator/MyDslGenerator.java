/**
 * generated by Xtext 2.25.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Command;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#generated_python_file");
    _builder.newLine();
    _builder.append("import pandas as pd");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Iterable<Command> _filter = Iterables.<Command>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Command.class);
      for(final Command c : _filter) {
        CharSequence _compile = this.compile(c);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t");
    _builder.newLine();
    fsa.generateFile("file.py", _builder);
  }
  
  private CharSequence compile1(final Command c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = c.eClass().getName();
      boolean _tripleEquals = (_name == "Print");
      if (_tripleEquals) {
        _builder.append("print(\"");
        String _name_1 = c.getName();
        _builder.append(_name_1);
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _name_2 = c.eClass().getName();
      boolean _tripleEquals_1 = (_name_2 == "Load");
      if (_tripleEquals_1) {
        _builder.append("load(\"");
        String _name_3 = c.getName();
        _builder.append(_name_3);
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _name_4 = c.eClass().getName();
      boolean _tripleEquals_2 = (_name_4 == "Create");
      if (_tripleEquals_2) {
        _builder.append("create(\"");
        String _name_5 = c.getName();
        _builder.append(_name_5);
        _builder.append("\")");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  private CharSequence compile(final Command c) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    String _name = c.eClass().getName();
    boolean _tripleEquals = (_name == "Print");
    if (_tripleEquals) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("print(\"");
      String _name_1 = c.getName();
      _builder.append(_name_1);
      _builder.append("\")");
      _switchResult = _builder;
    }
    if (!_matched) {
      String _name_2 = c.eClass().getName();
      boolean _tripleEquals_1 = (_name_2 == "Load");
      if (_tripleEquals_1) {
        _matched=true;
        StringConcatenation _builder_1 = new StringConcatenation();
        String _name_3 = c.getName();
        _builder_1.append(_name_3);
        _builder_1.append(" = pd.read_csv(\'");
        String _name_4 = c.getPath().getName();
        _builder_1.append(_name_4);
        _builder_1.append("\')");
        _switchResult = _builder_1;
      }
    }
    if (!_matched) {
      _switchResult = "Error";
    }
    return _switchResult;
  }
}
